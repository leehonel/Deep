#Reference material: Complete Python 3 Bootcamp master

00-Python Object and Data Structure Basic
*****************************************
Numbers
*******
Division can either be classic(/) or floor division(//). In the latter, the result from division is truncated and it returns an interger value.
The modulo(%) operator is used to get the remainder from a division operation.

Variables
*********
Variable assignment follows name=object, where a single equals sign is the assignment operator.
You can also reassign variables to reference to the same object.
The type() funcion is a built in funcion that is used to check what object is assigned to a variable.

Strings
*******
The len() function is a built in funcion that is used to show the length of a string. ie. the number of charecters including spaces and punctuations.
string_name[index number] can be used to print out a specific letter from a string value.
Strings in python are immutable, ie. once a string is created, elements within the string cannot be changed or replaced.
There are various methods that can be called to make changes to how strings are output.
	varible_name.method()
	eg. new.upper()		#this will output the string value of the variable new in all upper case.
	    new.lower()
	    new.split()		#this will split all the words in the string separated by a blank space.

The .format() method can be used to add formatted objects to printed string statements.
#Revisit Print Formatting with Strings

Lists
*****
They are a mutable version of strings, ie. elements in a list can be changed.
Lists are created with square brackets[ ] and commas separate every element within the list.
The len() funcion can be used to check the length of a list/ the number of items on the list.
Just like in strings, indexing and slicing work the same in lists.
To make changes permanent in a list, you have to reassing the list.
	eg. list_name = list_name + [item to be added permanently]
Unlike arrays in other programming languages, lists in python have no fixed size and they have no type constraint.
There are various methods that can be used to make changes to lists:
	list_name.method()
	eg. my_list.append('new data')		#this will permanently add the new_data item at the end of the list.
	    my_list.pop(index number of item in the list to be popped)		#this will permanently remove from the list the specified item.
	    my_list.reverse()			#this will print out the items in the list in a reverse order.
	    my_list.sort()			#if the list has letters or string items, they will be sorted in alphabetical order. But if the list has number values, they will be sorted in ascending order.
Python data structures supports nesting, ie. you can have a data structure within a data structure. eg. you can have a list within a list.
#Revisit List Comprehension

Dictionaries
************
Dictionaries work more like hash tables in that they use key/value pairs to store data.
They are flexible in the data types they can hold and the values of the keys can also be changed.
NB: For self addition and subtraction respectively, python has the following built-in functions: += and -=.
In dictionaries, you can also start off with an empty dictionary and add items to it.
Py also allows for nesting of dictionaries within dictionaries.
Py allows for a number of methods to be called on dictionaries:
	dictionary_name.keys()	returns a list of all keys
	dictionary_name.values()	returns all the values.
	dictionary_name.items()		returns tuples of all items.
