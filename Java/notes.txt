// Monday, February 10, 2020

// My official(self-driven) start into the java programming language.
/*
   Note to self:
	1. Incase a build tool is giving you presistent fails, make use of the other build tools available.
		experience: Maven wouldn't build at all, Gradle wouldn't work with the Scanner import, Ant seems to work fine.
*/

//Curly braces are optional if there is only one statement to execute
//When we code a program, we should always try to pre-empt possible errors. 
//Objects make calls to methods
//It is considered good practice to separate classes into files whenever possible.  




Java is an OOP language used for dev. of apps for mobile, web and desktop.
It is platform independent meaning a program written in java can be executed in any operating system.
Java code is converted into machine code through compilation and every computer platform has its own machine code instruction set meaning machine code is platform dependent.
Instead of converting into machine code directly, java uses a two-step compilation which first converts the code into bytecode(which is platform independent and then machine code)
	This two-step compilation allows for java code to be run on all platforms as long as the computer running the program has a JVM(Java Virtual Machine) installed.
//Object Oriented Programming(OOP) is an approach to programming that breaks down a programming problem into objects that interact with each other.
Components of a JDK:
	Compiler - to compile written code into byte code.
	Archiver - to package and distribute java files.
	Documentation Generator - to generate HTML documentation from our java code.
	
	//JDK is for dev. of Java programs
	//JRE is for running of java programs
For build tools, you can use either Maven or Gradle. I am currently using gradle.
During the creation of a project, pay attention to the name you give to your Main Class

Basic Structure of a Java program //Chapter One
*********************************
A package is a grouping of related classes and interfaces.
When a package name is written at the top of a .java file, this is asking the compiler to include the file in that package. A folder named after that package will be created and all the files that are part of that package will be stored in that folder.
Naming packages helps prevent naming conflicts. Two or more files can have the same name as long as they belong to different packages

Variables and Operators//Chapter Three
***********************
Variables are names given to data that we need to store and manipulate in our programs.
The declaration of a variable first starts by stating its data type and then the varible name.
	eg. int userName
The following are pre-defined data types in Java:
1. Byte - is used for storing intergers from -128 to 127. This is commonly used in cases where storage space is a concern or when it's clearly known that the value of the variable will not exceed the range.
2. Short - it uses 2 bytes of storage space and has a range of -32768 to 32767. 
3. Int - this is the most commonly used representation of variables because of its practicality. It has a range of -2^31 to 2^31. 
4. Long - this uses a range of 8bytes ie. -2^63 to 2^63. To initialize a long value, a suffix of L has to be added. 
5. Float - It is used to store numbers with decimal bits to them. To initialize a Float value, a suffix of F has to be added.
6. Double - it is more precise and efficient substitute to float. Unless memory space is a concern, you should always use a double instead of a float. 
7. Char - this is used to store a single unicode charecter and it uses two bytes of memory. When initializing a char value, it has to be enclosed in single quotes. 
8. Boolean - It is a special data type that is used to store only two values: true and false.

Variable names in java can only contain letters, numbers, underscore or the dollar sign. 
It is conventional and good practice to always start the first charecter of a variable name with a letter. 
//Reserved words - are words that cannot be used as variable names because they already have pre-assigned meaning in the language. 
It is conventional practice to use camel casing while naming variables in java. 
Camel casing involves capitalizing the first letter of each word except the first word. 
Varibale names are case sensitive.
Two variables of the same data type can be initialized in one statement.  
(=) is the assignment operator and it is used to assign the value on the right side of it to the variable to its left.
	Other assignment operators are (+= and -=) which are used to increment and decrement respectively the variable on the left by the value on the right.  
	(++ and --) are used to increase and decrease the variable values respectively by one. 
It is alright to assign the value of a variable to another variable. 
Basic mathematical operators (+, -, *, /, %) also apply in java. 
//Type Casting is the act of converting from one data type to another. 

Arrays and Strings//Chapter Four
******************
A string is essentially a piece of text. 
To declare and initialize a string variable, you write:
	String variableName ="String text";
A string is an object of the String class which provides a number of pre-written methods that can be used when working with strings. 
//A method is a block of reusable code that performs a certain task.
Examples of methods in the String class
	1. length() - this tells the total number of charecters the string has.
	//Whenever a method is used, it is presceded by a dot and then followed by parentheses after its name.
	//eg. String myLength = "Hello World".lenth();
	2. toUpperCase() - is used to convert a string to upper case
	3. toLowerCase() - is used to convert a string to lower case.
//Arguments are data required by some methods in order for them to work. The arguments are put inside the parentheses that follow a method.
	4. substring() - this is used to extract a substring from a longer string. This method requires arguments in the form of an interger, which tells the compiler from which part of the long string it should start extracting the substring. 
	5. charAt() - this method returns a single charecter from a string at the specified location.
	6. equals() - this method is used to compare if two strings are equal and returns true if they are otherwise false if they are not. 
	7. split() - this method splits a string into substrings based on a user-defined separator/delimeter. 

An Array is a collection of related data items.
There are two ways to declare array varibles in java:
	1. datatype[] variableName;
		eg. int[] userName;
	2. datatype variableName[];
		eg. int userName[];
	3. datatype[] variableName = new datatype[array size];
		eg. int[] userAge = new int[5];
Once you initialize an array, the size of the array cannot be changed. But the values of the elements in the array can be changed by accessing them through their indexes.
//Import statements should appear after the package statement and before the class declaration.
The following are methods available to arrays:
	1. equals() - this is used to check if two arrays are equal to each other. 
	2. copyOfRange() - Allows you to copy the contents of one array into another. 
	//revisit static array methods.
	3. toString() - this returns a string that represents the contents of an array making it easy to display the contents of an array.
			//continue from here.
	4. sort() - this method allows us to sort arrays, the arrays are sorted should be of type int. 
	5. binarySearch() - this method allows you to search for a specific value in a sorted array. The method takes two arguments: the first one is the array to be searched in and the second one is the value to be searched. 

Primitive Types(eg. int, long and float) vs. Reference Types(eg. strings and arrays)
All data types in java are either primitive of reference type.
Primitive types store their own value
	eg. int myNumber = 5;	//the variable myNumber stores the actual value of 5
While reference types don't store the actual value but rather a sort of pointer to the data. 
	eg. String message = "Hello";	//the variable message doesn't actually store the string but rather it stores the address to the memory location in which the string is stored.
//Strings are imutable: this means the string cannot be changed
//Garbage collection: is the automatic process in java that involves the automatic clearence of memory locations occupied by temporary variables/data that is no longer needed by the program.


Making our Program Interactive//Chapter Five
******************************
This involoves making a program that accepts inputs from users, stores the data in a variable and displays the message to the users.
Displaying Output
To display outputs, we use the methods print() and println() provided by java.
We add System.out before the methods in order to access them because the two methods belong in the PrintSteam class.
//println() moves the cursor to the next line after printing its output while print() does not move the cursor.
//When you want to display the value of a variable, you do not enclose the variable name in quotes.
println() can also be used to display the result of a mathematical 
expression directly.
The concatenation sign(+) is used to combine multiple strings or 
outputs.
The print() method gives more control over the manner in which outputs 
are made. 
	-It takes one or more arguments that specify the output and the 
form in which the output takes.
	-Format specifiers always begin with the (%) sign

Converters
	1. The interger converter:(%d) - this is for converting 
intergers of types such as int, long, byte and short.
	2. Newline converter:(%n) - this converter moves the cursor to 
the new line.
	3. The width flag - this is used to specify the total width.
	4. The thousands flag:(,) - this is used to display the numbers 
with a thousands separator. 

Accepting User Input
The easiest way to accept user input is to use the scanner object.
	- this is done by first importing the scanner class:
		import java.util.Scanner;
	- next you create a Scanner object and pass System.in as an argument. System.in tells the compiler that you want to get an input from the standard input devices, which is usually the keyboard.
	//the scanner class contains a few methods that can be used to read input from users. eg. nextInt(), nextDouble() and nextLine() for reading int, double and String data types respectively.  
	- the next() method allows for various specificartions eg. int, double etc.

Control Flow Statements
***********************
By default, statements are executed from top to bottom in the order that they appear.
Control flow statements are used to alter this flow.
The control flow statements include:
	- decision-making statements(if, switch)
	- looping statements(for, while, do-while)
	- branching statements(break, continue)

Comparison Operators
1. Comparison Operator(==)
	Checks if two values are equal, if they are then the condition is met and the statement evaluates to true. Else the statement evaluates to false.
2. Not equal(!=)
	Returns to true if the left is not equal to the right.
3. Greater than(>)
	Returns true if the left is greater than the right. 
4. Smaller than(<)
	Returns true if the left is less than the right.
5. Greater then or equal to(>=)
	Returns true if the left is greater than or equal to the right.
6. Smaller than or equal to(<=)
	Returns true if the left is less than or equal to the right.

Logical Operators
These are useful when you want to combine multiple conditions
1. The AND operator(&&)
	Returns true if all conditions are met. 
2. The OR operator(||)
	Returns true if atleast one of the conditions is met. 

Decision Making Statements
1. If Statement 
	Allows the program to evaluate if a certain condition is met and perform the appropriate action based on the result of the evaluation.
2. Ternary Operator(?)
	It is a simpler form of an if statement that is convenient if you want to assign a value to a variable depending on the result of a condition. 
	The syntax is:
		condition ? value to return if condition is true : value to return if condition is false
3. Switch Statement
	It is similar to an if statement except it does not work with a range of values. 
	It requires each case to be based on a single value. Depending on the value of the variable used for switching, the program will execute the correct block of code. 
	//Starting from Java 7, you can use a string variable for switching. 
	When a certain case is satisfied, everything starting from the next line is executed until a break statement is reached. 
	A break statement instructs the program to break out of the switch statement and continue executing the rest of the program. 

Looping Statements
1. For Statement 
	It executes a bock of code repeatedly until the test condition is no longer valid.
	The syntax is: 
		for(initial value; test condition; modification of value)
		{
			//task to be done
		}
2. Enhanced For Statement
	This is used when working with arrays and Collections*
	It is useful if you want to get information from an array without making changes to it.
	The syntax is: 
		for(variable declaration : name of array)
		{
			//task to be done
		}
3. While Statement
	This repeatedly executes instructions inside the loop while a certain condition remains valid. 
	The syntax is: 
		while (condition is true)
		{
			//task to be done				
`		}
4. Do-While Statement
	This is just like the while() statement but the only difference is that its curly bracket code is executed atleast once.
	The syntax is: 
		do{
			//task to be done
		}while(condition is true);

Branching Statements
These are statements that instruct the program to branch to another line of code. 
1. Break Statement
	An example of its use is in the switch statements
	It can also be used in other control flow statements eg. in if() statements where it causes the program to exit a loop premanently if a certain condition is met. 
	The syntax is:
		for(condition A){
			perform task A;
			if(condition B)
				break;
		}
		//the above example is a nested control statement.
2. Continue Statement
	When we use continue, the rest of the loop after the word is skipped for that iteration.

Exception Handling
This refers to controlling flow in a program when an error occurs. 
With this, we should always try to pre-empt possible errors in a program we code. 
If we believe a certain block of code may cause an error, we should try to manage it using the try-catch-finally statement. 
The syntax for this is:
	try{
		do something
	}
	catch(type of error you anticipate){
		do something else when an error occurs
	}
	finally{
		do this regardless of whether the try or catch conditions are met. 
	}
You can have more than one catch blocks and the finally block is optional.
The finally block is always executed regardless of whether the try or catch block is executed. 
The catch block helps specify the error we want to catch.
Below is an example of a catch block:
	...
	catch(Exception e){	//Exception refers to the class that the error belongs to, and e is the name to the given error. 
		System.out.println(e.getMessage());
	}
	//Exception is a pre-written class in java that handles general errors and has a method called getMessage() that explains the reason for the exception. 

You can catch specific errors if you want to perform specific tasks depending on the errors caught.
		//Revisit Specific Errors and Throwing exceptions



Object Oriented Programming Part 1
**********************************
This is an approach to programming that breaks down programming problems into objects that intreact with each other.

Classes
*******

A class is a tamplate that is used to create objects. 
	//think of a class as a blueprint to a building and then the object as the actual building that is build using the class blueprint. 
The syntax for declaring a class is as follows: 
	AccessModifier class ClassName{
		//contents of the class
		//these include fields, constructors and methods
	}
AccessModifiers - These define the access level of the class. 
		  They control who has access to that class ie. if other classes can use a particular field or method in that class. 
		  A class can either be: 
			public : this means it's accessible by any class in the program.
			package-private : this means the class is only accessible to other classes within the same package. //A package is a grouping of related classes.
		  If we don't write any access modifiers to a class, this makes it by default package-private. 
class - this is a keyword indicating we are declaring a class and is followed by the name of the class. 
	It is common practice to use PascalCasing when naming classes. //ie capitalizing the first letter of each word. 
	In java, there can only be one public class per java file and that public class must have the same name as the file.
	The main method is inside the public class. 
Field - This is a variable that is declared inside a class
	A field can be declared as either private(can only be accessed from within the class itself), public or protected. 
	//encapsulation - a class hiding data and behaviour from other class that do not need to know about them. 
	Reasons for declaring a field as private: 
		If it's only needed within its class
		If you do not want other classes to freely modify them. 
	//a keyword 'final' can be added after an access modifier to indicate that a variable value cannot be changed after it is declared. 

Methods()
*********

A method is a code block that performs a certain task.
A method is always added inside a class. 
The syntax for a method declaration is: 
	accessModifier	returnType methodName(parameters){
		//method contents
	}
	//void is used as a method return type if the method doesn't return any value. 
	//parameters refers to data that is passed into a method in order for it to perform its task. If a method requires no data, we add empty parenthesis. 
A method can access all the fields that are declared in its class and can also declare its own. 
A method has atleast one return statement. 
Once a method executes its return statement it exits. 
There may be cases where a method does not need to return an answer but simply uses the return statement to exit the method. 

**Overloading - This refers to creating two methods of the same name as long as they have different signatures. 
  //The signature of a method refers to its name and the parameters it has. 

**Setter and Getter Methods - are written to make privately declared fields accessible to other classes that are not their own.
	- Getter and Setter methods give greater control over what rights other classes have when assigning them privately declared fields. 
	- It is convention to name setter methods with the word 'set' followed by the name of the field. 
Arrays can also be used as parameters in methods. The syntax for this is:
	modifier returnType methodName(dataType[] ){
	
	}
	To call such a method, an array has to be declared and passed as an argument in the method. 
An array can also be returned in a method. The syntax for this is:
	modifier returnType[] methodName(parameters){

	}
	To use this method, an array has to be declared and the method's result assigned to it. 


Constructors
************
A constructor is a block of code similar to a method that is used to 'construct' an object from the class template. 
It always has the same name as the class and is commonly used to initialize the fields of the class. 
A constructor is the first block of code that is called whenever we create an object from our class. 
A constructor does not return any value and we do not have to use the void keyword when declaring a constructor. 
Similar to methods, we can have more than one constructor with the same name as long as the signature is different. 
Declaring constructors is optional, if we do not declare one NetBeans automatically generates a default constructor for us. 

Instantiating an Object	
***********************
This refers to making use of a class to create an object
The syntax for instantiating an object is:
	ClassName objectName = new ClassName(arguments);
After you instantiate an object, you can use the dot (.) operator after the object's name to access any public field or method declared in any class. 


Static
******
When a method/field is declared as static, you do not need to instantiate an object in order to access it, but rather just the name of the class in which it is declared. 
	eg. classname.method/fieldname
//It is good practice to separate classes into separate files whenever possible. 

Primitive Type and Reference Type Parameters
********************************************
When you pass a primitive type variable, any change made to the value of the variable is only valid within the method itself. 
While when you pass in a reference type variable, any changes made to the value of the variable are valid even after the method ends.

			//Continue from page 102

File Handling
*************

Import the java.io.* package to get access to the various classes available for file handling. 
//the * after the import indicates you are importing the entire java.io package

Reading a text file
File Reading - Use the FileReader class, which reads the contents of a file as a stream of charecters, reading in one charecter at a time.
		A more efficient way to do this would be to wrap the a BufferReader object around the FileReader object.
		The BufferReader object provides buffering for the reading operation by reading larger blocks at a time and thus speeding up the process.	
	        Once you create a FileReader object you are ready to read data from the file.  
File Writing - For this, we use the BufferWriter and FileWritter classes all found in the java.io package.


